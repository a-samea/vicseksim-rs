name: Rust CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check-and-lint:
    name: Check & Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt, clippy
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run linter
        run: cargo clippy --all-targets --all-features -- -D warnings

  test:
    name: Test
    needs: check-and-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
      - name: Run tests
        run: cargo test --workspace --verbose

  build-binaries:
    name: Build Binaries
    needs: test
    strategy:
      matrix:
        include:
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-name: vicseksim-rs
            os: linux
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            binary-name: vicseksim-rs.exe
            os: windows
          - platform: macos-latest
            target: x86_64-apple-darwin
            binary-name: vicseksim-rs
            os: macos
          - platform: macos-latest
            target: aarch64-apple-darwin
            binary-name: vicseksim-rs
            os: macos-arm64
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ matrix.target }}
      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}
      - name: Create archive (Unix)
        if: matrix.platform != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar -czf vicseksim-rs-${{ matrix.os }}.tar.gz ${{ matrix.binary-name }}
      - name: Create archive (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          Compress-Archive -Path ${{ matrix.binary-name }} -DestinationPath vicseksim-rs-${{ matrix.os }}.zip
      - name: Upload Unix artifacts
        if: matrix.platform != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vicseksim-rs-${{ matrix.os }}
          path: target/${{ matrix.target }}/release/vicseksim-rs-${{ matrix.os }}.tar.gz
      - name: Upload Windows artifacts
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: vicseksim-rs-${{ matrix.os }}
          path: target/${{ matrix.target }}/release/vicseksim-rs-${{ matrix.os }}.zip

  create-release:
    name: Create Release
    if: github.event_name == 'release'
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Display structure of downloaded files
        run: ls -la artifacts/
      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/vicseksim-rs-linux/vicseksim-rs-linux.tar.gz
            artifacts/vicseksim-rs-windows/vicseksim-rs-windows.zip
            artifacts/vicseksim-rs-macos/vicseksim-rs-macos.tar.gz
            artifacts/vicseksim-rs-macos-arm64/vicseksim-rs-macos-arm64.tar.gz
          generate_release_notes: true